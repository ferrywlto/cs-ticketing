@page "/agent/tickets"
@layout TicketLayout

<PageTitle>Support Tickets - CS Agent</PageTitle>

<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Left Panel: Ticket List (No New Ticket Button for Agents) -->
        <div class="col-md-4 border-end">
            <div class="d-flex flex-column h-100">
                <!-- Header for Agent View -->
                <div class="p-3 border-bottom">
                    <h5 class="mb-0 text-muted">Unresolved Tickets</h5>
                </div>
                
                <!-- Ticket List -->
                <div class="flex-grow-1 overflow-auto">
                    @foreach (var ticket in UnresolvedTickets)
                    {
                        <div class="ticket-list-item p-3 border-bottom @(ticket.Id == selectedTicketId ? "selected" : "")" 
                             @onclick="() => SelectTicket(ticket.Id)">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="flex-grow-1 me-3">
                                    <h6 class="mb-1 text-truncate">@ticket.Title</h6>
                                    <div class="small text-muted">
                                        <div>@ticket.PlayerName</div>
                                        <div>@ticket.PlayerId • @ticket.CreatedDate.ToString("MMM dd, yyyy")</div>
                                    </div>
                                </div>
                                <div class="avatar-placeholder">
                                    <i class="bi bi-person-circle fs-4 text-primary"></i>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <!-- Right Panel: Ticket Details -->
        <div class="col-md-8">
            @if (selectedTicket != null)
            {
                <div class="d-flex flex-column h-100">
                    <!-- Ticket Header -->
                    <div class="p-3 border-bottom">
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <div class="d-flex align-items-center gap-2">
                                    <h4 class="mb-0">@selectedTicket.Title</h4>
                                    <span class="badge @GetStatusBadgeClass(selectedTicket.Status)">@selectedTicket.Status</span>
                                </div>
                                @if (selectedTicket.Status != "Resolved")
                                {
                                    <button class="btn btn-success" @onclick="ResolveTicket">
                                        <i class="bi bi-check-circle"></i> Resolve
                                    </button>
                                }
                            </div>
                            @if (selectedTicket.Status == "Resolved" && !string.IsNullOrEmpty(selectedTicket.ResolvedBy) && selectedTicket.ResolvedDate.HasValue)
                            {
                                <div class="small text-muted">
                                    <i class="bi bi-check-circle-fill text-success me-1"></i>
                                    Resolved by <strong>@selectedTicket.ResolvedBy</strong> on @selectedTicket.ResolvedDate.Value.ToString("MMM dd, yyyy HH:mm")
                                </div>
                            }
                        </div>
                        
                        <!-- Ticket Description Card -->
                        <div class="card mb-3">
                            <div class="card-body">
                                <p class="card-text">@selectedTicket.Description</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="small text-muted">
                                        <div>@selectedTicket.PlayerName</div>
                                        <div>@selectedTicket.PlayerId • @selectedTicket.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                                    </div>
                                    <div class="avatar-placeholder">
                                        <i class="bi bi-person-circle fs-4 text-primary"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Messages Area -->
                    <div class="flex-grow-1 overflow-auto p-3">
                        @foreach (var message in selectedTicket.Messages)
                        {
                            <div class="message-item mb-3">
                                <div class="card @(message.IsFromAgent ? "border-success" : "border-primary")">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div class="flex-grow-1">
                                                <p class="card-text">@message.Content</p>
                                                <div class="small text-muted">
                                                    <div>@(message.IsFromAgent ? "CS Agent" : message.SenderName)</div>
                                                    <div>@message.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                                                </div>
                                            </div>
                                            <div class="avatar-placeholder ms-3">
                                                <i class="bi bi-@(message.IsFromAgent ? "shield-fill" : "person-circle") fs-4 @(message.IsFromAgent ? "text-success" : "text-primary")"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    
                    <!-- Reply Section -->
                    @if (selectedTicket.Status != "Resolved")
                    {
                        <div class="p-3 border-top">
                            <div class="d-flex align-items-start">
                                <div class="avatar-placeholder me-3">
                                    <i class="bi bi-shield-fill fs-4 text-success"></i>
                                </div>
                                <div class="flex-grow-1">
                                    <textarea class="form-control mb-2" rows="3" placeholder="Type your reply..." @bind="replyText"></textarea>
                                    <button class="btn btn-primary" @onclick="SendReply">
                                        <i class="bi bi-send"></i> Send
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="p-3 border-top bg-light text-center">
                            <div class="text-muted">
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                This ticket has been resolved.
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center h-100">
                    <div class="text-center text-muted">
                        <i class="bi bi-ticket-detailed fs-1 mb-3"></i>
                        <h5>Select a ticket to view details</h5>
                        <p>Choose a ticket from the list to see the conversation</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private int? selectedTicketId;
    private TicketViewModel? selectedTicket => AllTickets.FirstOrDefault(t => t.Id == selectedTicketId);
    private string replyText = "";

    // Sample data - only unresolved tickets from all players
    private List<TicketViewModel> UnresolvedTickets => AllTickets.Where(t => t.Status != "Resolved").ToList();

    private List<TicketViewModel> AllTickets = new()
    {
        new TicketViewModel
        {
            Id = 1,
            Title = "Can't load the game",
            Description = "Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.",
            PlayerName = "Jane Doe",
            PlayerId = "987654",
            CreatedDate = DateTime.Now.AddDays(-2),
            Status = "Open",
            Messages = new()
            {
                new MessageViewModel 
                { 
                    Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.",
                    SenderName = "CS Agent",
                    IsFromAgent = true,
                    CreatedDate = DateTime.Now.AddDays(-1)
                },
                new MessageViewModel 
                { 
                    Content = "Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est.",
                    SenderName = "Jane Doe",
                    IsFromAgent = false,
                    CreatedDate = DateTime.Now.AddHours(-2)
                }
            }
        },
        new TicketViewModel
        {
            Id = 2,
            Title = "Refund request",
            Description = "Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est.",
            PlayerName = "Jane Doe",
            PlayerId = "987654",
            CreatedDate = DateTime.Now.AddDays(-3),
            Status = "In Resolution",
            Messages = new()
        },
        new TicketViewModel
        {
            Id = 3,
            Title = "Account recovery",
            Description = "Qui dolorem ipsum quia dolor sit amet, consectetur.",
            PlayerName = "John Smith",
            PlayerId = "654321",
            CreatedDate = DateTime.Now.AddDays(-5),
            Status = "Open",
            Messages = new()
        },
        new TicketViewModel
        {
            Id = 4,
            Title = "Can't load the game",
            Description = "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident.",
            PlayerName = "Jane Smith",
            PlayerId = "456789",
            CreatedDate = DateTime.Now.AddDays(-1),
            Status = "Open",
            Messages = new()
        },
        new TicketViewModel
        {
            Id = 5,
            Title = "Payment issue",
            Description = "Payment was charged but game access not granted.",
            PlayerName = "Mike Johnson",
            PlayerId = "123456",
            CreatedDate = DateTime.Now.AddDays(-4),
            Status = "Resolved", // This should not show in agent view
            ResolvedDate = DateTime.Now.AddDays(-3),
            ResolvedBy = "CS Agent Sarah",
            Messages = new()
        },
        new TicketViewModel
        {
            Id = 6,
            Title = "Password Reset Help",
            Description = "Unable to reset password using the forgot password feature.",
            PlayerName = "Emma Davis",
            PlayerId = "567890", 
            CreatedDate = DateTime.Now.AddDays(-5),
            Status = "Resolved",
            ResolvedDate = DateTime.Now.AddDays(-4),
            ResolvedBy = "CS Agent Mike",
            Messages = new()
        }
    };

    protected override void OnInitialized()
    {
        // Auto-select first unresolved ticket
        selectedTicketId = UnresolvedTickets.FirstOrDefault()?.Id;
    }

    private void SelectTicket(int ticketId)
    {
        selectedTicketId = ticketId;
    }

    private void ResolveTicket()
    {
        if (selectedTicket != null)
        {
            selectedTicket.Status = "Resolved";
            selectedTicket.ResolvedDate = DateTime.Now;
            selectedTicket.ResolvedBy = "Current Agent"; // In real app, this would be the logged-in agent's name
            // TODO: Implement resolve ticket logic
            Console.WriteLine($"Resolve ticket {selectedTicket.Id}");
            
            // Select next unresolved ticket after resolving current one
            var remainingTickets = UnresolvedTickets;
            selectedTicketId = remainingTickets.FirstOrDefault()?.Id;
            StateHasChanged();
        }
    }

    private void SendReply()
    {
        if (!string.IsNullOrWhiteSpace(replyText) && selectedTicket != null)
        {
            selectedTicket.Messages.Add(new MessageViewModel
            {
                Content = replyText,
                SenderName = "CS Agent",
                IsFromAgent = true,
                CreatedDate = DateTime.Now
            });
            replyText = "";
            // TODO: Implement send reply logic
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Open" => "bg-success",
            "InResolution" => "bg-warning",
            "Resolved" => "bg-primary",
            _ => "bg-primary"
        };
    }

    // View Models
    public class TicketViewModel
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string PlayerName { get; set; } = "";
        public string PlayerId { get; set; } = "";
        public DateTime CreatedDate { get; set; }
        public string Status { get; set; } = "";
        public DateTime? ResolvedDate { get; set; }
        public string? ResolvedBy { get; set; }
        public List<MessageViewModel> Messages { get; set; } = new();
    }

    public class MessageViewModel
    {
        public string Content { get; set; } = "";
        public string SenderName { get; set; } = "";
        public bool IsFromAgent { get; set; }
        public DateTime CreatedDate { get; set; }
    }
}
