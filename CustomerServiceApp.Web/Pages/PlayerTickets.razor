@page "/player/tickets"
@layout TicketLayout
@using CustomerServiceApp.Web.Services
@using CustomerServiceApp.Web.State
@using CustomerServiceApp.Application.Tickets
@using CustomerServiceApp.Application.Common.DTOs
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation
@inject AppStateStore AppState
@inject ApiService ApiService
@inject ILogger<PlayerTickets> Logger
@implements IDisposable



<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Left Panel: New Ticket Button + Ticket List -->
        <div class="col-md-4 border-end">
            <div class="d-flex flex-column h-100">
                <!-- Logout Button and New Ticket Button -->
                <div class="p-3 border-bottom">
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-secondary" @onclick="LogoutPlayer">
                            <i class="bi bi-box-arrow-left"></i> Logout
                        </button>
                        <button class="btn btn-primary flex-grow-1" @onclick="CreateNewTicket">
                            <i class="bi bi-plus-circle"></i> New ticket
                        </button>
                    </div>
                </div>
                
                <!-- Ticket List -->
                <div class="flex-grow-1 overflow-auto">
                    @if (isLoading)
                    {
                        <div class="p-3 text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="mt-2">Loading tickets...</div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="p-3">
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        </div>
                    }
                    else if (!TicketList.Any())
                    {
                        <div class="p-3 text-center text-muted">
                            <i class="bi bi-inbox fs-1"></i>
                            <div class="mt-2">No tickets found</div>
                            <div class="small">Create your first ticket to get started</div>
                        </div>
                    }
                    else
                    {
                        @foreach (var ticket in TicketList)
                        {
                            <div class="ticket-list-item p-3 border-bottom @(ticket.Id == selectedTicket?.Id ? "selected" : "")" 
                                 @onclick="() => SelectTicket(ticket.Id)">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1 me-3">
                                        <h6 class="mb-1 text-truncate">@ticket.Title</h6>
                                        <div class="small text-muted">
                                            <div>@ticket.Creator.Name</div>
                                            <div>@ticket.Creator.PlayerNumber • @ticket.CreatedDate.ToString("MMM dd, yyyy")</div>
                                        </div>
                                    </div>
                                    <div class="avatar-placeholder">
                                        <i class="bi bi-person-circle fs-4 text-primary"></i>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        
        <!-- Right Panel: Ticket Details -->
        <div class="col-md-8">
            @if (selectedTicket != null)
            {
                <div class="d-flex flex-column h-100">
                    <!-- Ticket Header -->
                    <div class="p-3 border-bottom">
                        <div class="d-flex justify-content-between align-items-start mb-3">
                            <h4 class="mb-0">@selectedTicket.Title</h4>
                            <button class="btn btn-success" @onclick="ResolveTicket">
                                <i class="bi bi-check-circle"></i> Resolve
                            </button>
                        </div>
                        
                        <!-- Ticket Description Card -->
                        <div class="card mb-3">
                            <div class="card-body">
                                <p class="card-text">@selectedTicket.Description</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="small text-muted">
                                        <div>@selectedTicket.Creator.Name</div>
                                        <div>@selectedTicket.Creator.PlayerNumber • @selectedTicket.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                                    </div>
                                    <div class="avatar-placeholder">
                                        <i class="bi bi-person-circle fs-4 text-primary"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Messages Area -->
                    <div class="flex-grow-1 overflow-auto p-3">
                        @if (selectedTicket.Messages.Any())
                        {
                            @foreach (var message in selectedTicket.Messages)
                            {
                                var isFromAgent = message.Author.UserType == "Agent";
                                <div class="message-item mb-3">
                                    <div class="card @(isFromAgent ? "border-success" : "border-primary")">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <p class="card-text">@message.Content</p>
                                                    <div class="small text-muted">
                                                        <div>@(isFromAgent ? "CS Agent" : message.Author.Name)</div>
                                                        <div>@message.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                                                    </div>
                                                </div>
                                                <div class="avatar-placeholder ms-3">
                                                    <i class="bi bi-@(isFromAgent ? "shield-fill" : "person-circle") fs-4 @(isFromAgent ? "text-success" : "text-primary")"></i>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted">
                                <i class="bi bi-chat-text fs-1"></i>
                                <p>No messages yet. Start the conversation!</p>
                            </div>
                        }
                    </div>
                    
                    <!-- Reply Section -->
                    <div class="p-3 border-top">
                        <div class="d-flex align-items-start">
                            <div class="avatar-placeholder me-3">
                                <i class="bi bi-person-circle fs-4 text-primary"></i>
                            </div>
                            <div class="flex-grow-1">
                                <textarea class="form-control mb-2" rows="3" placeholder="Type your message..." @bind="replyText"></textarea>
                                <button class="btn btn-primary" @onclick="SendReply">
                                    <i class="bi bi-send"></i> Send
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center h-100">
                    <div class="text-center text-muted">
                        <i class="bi bi-ticket-detailed fs-1 mb-3"></i>
                        <h5>Select a ticket to view details</h5>
                        <p>Choose a ticket from the list to see the conversation</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string replyText = "";
    private bool isLoading = true;
    private string? errorMessage;

    // Get current player ID from app state
    private string CurrentPlayerId => AppState.GetState().CurrentUser?.Id.ToString() ?? "";

    // Get tickets from app state instead of mock data
    private IReadOnlyList<TicketDto> TicketList => AppState.GetState().Tickets;

    // Get selected ticket from app state
    private TicketDto? selectedTicket => AppState.GetState().SelectedTicket;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to state changes
        AppState.StateChanged += OnStateChanged;
        
        try
        {
            // Set loading state
            AppState.DispatchLoadingStateAsync(true);
            
            // Fetch tickets from server
            var tickets = await ApiService.GetTicketsAsync();
            
            // Store tickets in app state
            await AppState.DispatchTicketsLoadedAsync(tickets);
            
            // Auto-select first ticket if available
            var firstTicket = tickets.FirstOrDefault();
            if (firstTicket != null)
            {
                await AppState.DispatchSelectTicketAsync(firstTicket);
            }
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load tickets for player {PlayerId}", CurrentPlayerId);
            errorMessage = "Failed to load tickets. Please try again.";
            isLoading = false;
            AppState.DispatchLoadingStateAsync(false);
        }
    }

    private async void OnStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectTicket(Guid ticketId)
    {
        var ticket = TicketList.FirstOrDefault(t => t.Id == ticketId);
        if (ticket != null)
        {
            await AppState.DispatchSelectTicketAsync(ticket);
        }
    }

    private async Task CreateNewTicket()
    {
        try
        {
            // Navigate to new ticket creation page
            Navigation.NavigateTo("/player/tickets/new");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to navigate to new ticket page");
            await AppState.DispatchErrorAsync("Failed to create new ticket. Please try again.");
        }
    }

    private async Task LogoutPlayer()
    {
        await AppState.DispatchLogoutAsync();
        Navigation.NavigateTo("/player/login", replace: true);
    }

    private async Task ResolveTicket()
    {
        if (selectedTicket != null)
        {
            try
            {
                AppState.DispatchLoadingStateAsync(true);
                
                // Call API to resolve ticket
                await ApiService.ResolveTicketAsync(selectedTicket.Id);
                
                // Update ticket status in state
                var updatedTicket = selectedTicket with { Status = "Resolved" };
                await AppState.DispatchTicketUpdatedAsync(updatedTicket);
                
                AppState.DispatchLoadingStateAsync(false);
                Logger.LogInformation("Ticket {TicketId} resolved successfully", selectedTicket.Id);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to resolve ticket {TicketId}", selectedTicket.Id);
                await AppState.DispatchErrorAsync("Failed to resolve ticket. Please try again.");
                AppState.DispatchLoadingStateAsync(false);
            }
        }
    }

    private async Task SendReply()
    {
        if (!string.IsNullOrWhiteSpace(replyText) && selectedTicket != null && AppState.GetState().CurrentUser != null)
        {
            try
            {
                AppState.DispatchLoadingStateAsync(true);
                
                // Create reply DTO
                var createReplyDto = new CreateReplyDto(
                    replyText,
                    AppState.GetState().CurrentUser!.Id,
                    selectedTicket.Id);
                
                // Call API to add reply
                await ApiService.AddReplyAsync(selectedTicket.Id, createReplyDto);
                
                // Clear reply text
                replyText = "";
                
                // Refresh ticket data to get updated messages
                var tickets = await ApiService.GetTicketsAsync();
                await AppState.DispatchTicketsLoadedAsync(tickets);
                
                // Maintain selected ticket
                var updatedSelectedTicket = tickets.FirstOrDefault(t => t.Id == selectedTicket.Id);
                if (updatedSelectedTicket != null)
                {
                    await AppState.DispatchSelectTicketAsync(updatedSelectedTicket);
                }
                
                AppState.DispatchLoadingStateAsync(false);
                Logger.LogInformation("Reply added to ticket {TicketId}", selectedTicket.Id);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to send reply for ticket {TicketId}", selectedTicket.Id);
                await AppState.DispatchErrorAsync("Failed to send reply. Please try again.");
                AppState.DispatchLoadingStateAsync(false);
            }
        }
    }

    public void Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}
