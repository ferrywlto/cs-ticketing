@page "/agent/tickets"
@layout TicketLayout
@using CustomerServiceApp.Web.Services
@using CustomerServiceApp.Web
@using CustomerServiceApp.Web.Components
@using CustomerServiceApp.Application.Tickets
@using CustomerServiceApp.Application.Common.DTOs
@using CustomerServiceApp.Domain.Tickets
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation
@inject AppStateStore AppState
@inject ApiService ApiService
@inject ILogger<AgentTickets> Logger
@implements IDisposable

<PageTitle>Agent Dashboard</PageTitle>

<div class="ticket-page-container">
    <div class="row h-100">
        <!-- Left Panel: Logout Button + Ticket List -->
        <div class="col-md-4 ticket-left-panel">
            <!-- Logout Button -->
            <div class="ticket-panel-header">
                <button class="btn btn-outline-secondary w-100" @onclick="LogoutAgent">
                    <i class="bi bi-box-arrow-left"></i> Logout
                </button>
            </div>
            
            <!-- Ticket List -->
            <div class="ticket-list-container">
                @if (isLoading)
                {
                    <div class="p-3 text-center">
                        <div class="spinner-border text-success" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <div class="mt-2">Loading tickets...</div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="p-3">
                        <div class="alert alert-danger">
                            @errorMessage
                        </div>
                    </div>
                }
                else if (!TicketList.Any())
                {
                    <div class="p-3 text-center text-muted">
                        <i class="bi bi-inbox fs-1"></i>
                        <div class="mt-2">No tickets assigned</div>
                        <div class="small">All tickets are resolved or assigned to other agents</div>
                    </div>
                }
                else
                {
                    @foreach (var ticket in TicketList)
                    {
                        <TicketListItem Ticket="ticket" 
                                      IsSelected="ticket.Id == selectedTicket?.Id" 
                                      OnTicketSelected="() => SelectTicket(ticket.Id)" />
                    }
                }
            </div>
        </div>
        
        <!-- Right Panel: Ticket Details -->
        <div class="col-md-8 ticket-right-panel">
            @if (selectedTicket != null)
            {
                <!-- Ticket Header -->
                <div class="ticket-header">
                    <div class="d-flex align-items-center gap-2 mb-2">
                        <h4 class="mb-0">@selectedTicket.Title</h4>
                        <span class="badge @GetStatusBadgeClass(selectedTicket.Status)">@selectedTicket.Status</span>
                        @if (selectedTicket.Status != "Resolved")
                        {
                            <button class="btn btn-success btn-sm ms-auto" @onclick="() => ResolveTicket(selectedTicket.Id)" disabled="@isLoading">
                                <i class="bi bi-check-circle"></i> Mark as Resolved
                            </button>
                        }
                    </div>
                    @if (selectedTicket.Status == "Resolved" && selectedTicket.ResolvedBy != null && selectedTicket.ResolvedDate.HasValue)
                    {
                        <div class="small text-muted">
                            <i class="bi bi-check-circle-fill text-success me-1"></i>
                            Resolved by <strong>@selectedTicket.ResolvedBy.Name</strong> on @selectedTicket.ResolvedDate.Value.ToString("MMM dd, yyyy HH:mm")
                        </div>
                    }
                    
                    <!-- Ticket Description Card -->
                    <div class="card mb-3">
                        <div class="card-body">
                            <p class="card-text">@selectedTicket.Description</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="small text-muted">
                                    <div>@(selectedTicket.Creator?.Name ?? "Unknown")</div>
                                    <div>@(selectedTicket.Creator?.PlayerNumber ?? "N/A") â€¢ @selectedTicket.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                                </div>
                                <div class="avatar-placeholder">
                                    @if (!string.IsNullOrEmpty(selectedTicket.Creator?.Avatar))
                                    {
                                        <img src="@selectedTicket.Creator.Avatar" alt="@(selectedTicket.Creator?.Name ?? "User")" class="rounded-circle" style="width: 32px; height: 32px; object-fit: cover;" />
                                    }
                                    else
                                    {
                                        <i class="bi bi-person-circle fs-4 text-primary"></i>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Messages Container -->
                <div class="ticket-messages-container">
                    @if (selectedTicket.Messages?.Any() == true)
                    {
                        @foreach (var message in selectedTicket.Messages)
                        {
                            var isFromAgent = message.Author?.UserType == "Agent";
                            <MessageCard Message="message" IsFromAgent="isFromAgent" />
                        }
                    }
                    else
                    {
                        <div class="text-center text-muted p-4">
                            <i class="bi bi-chat-text fs-1"></i>
                            <p>No messages yet. Start helping the customer!</p>
                        </div>
                    }
                </div>
                
                <!-- Sticky Reply Input -->
                <div class="reply-input-sticky">
                    <MessageReplyInput OnReplyResult="OnReplyResult" />
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center h-100">
                    <div class="text-center text-muted">
                        <i class="bi bi-ticket-detailed fs-1 mb-3"></i>
                        <h5>Select a ticket to view details</h5>
                        <p>Choose a ticket from the list to help the customer</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isLoading = true;
    private string? errorMessage;

    // Get current agent ID from app state
    private string CurrentAgentId => AppState.GetState()?.CurrentUser?.Id.ToString() ?? "";

    // Get unresolved tickets from app state (API already filters to unresolved tickets for agents)
    private IReadOnlyList<TicketDto> TicketList => AppState.GetState()?.Tickets ?? new List<TicketDto>().AsReadOnly();

    // Get selected ticket from app state
    private TicketDto? selectedTicket => AppState.GetState()?.SelectedTicket;

    /// <summary>
    /// Gets the CSS class for ticket status badge
    /// </summary>
    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Open" => "bg-success text-white",
            "InResolution" => "bg-warning text-dark",
            "Resolved" => "bg-primary text-white",
            _ => "bg-secondary text-white"
        };
    }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to state changes
        AppState.StateChanged += OnStateChanged;
        
        try
        {
            // Set loading state
            AppState.DispatchLoadingStateAsync(true);
            
            // Check if user is authenticated
            var currentUser = AppState.GetState()?.CurrentUser;
            if (currentUser == null)
            {
                Logger.LogWarning("No authenticated user found when loading agent tickets");
                Navigation.NavigateTo("/agent/login", replace: true);
                return;
            }

            // Load tickets and auto-select the first one
            var tickets = await LoadTicketsAsync(autoSelectFirst: true);
            
            if (tickets == null)
            {
                errorMessage = "Failed to load tickets. Please try again.";
            }
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize agent tickets page for agent {AgentId}", CurrentAgentId);
            errorMessage = "Failed to load tickets. Please try again.";
            isLoading = false;
        }
        finally
        {
            AppState.DispatchLoadingStateAsync(false);
        }
    }

    private async void OnStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectTicket(Guid ticketId)
    {
        try
        {
            // Check if the clicked ticket is already selected - if so, do nothing
            var currentSelectedTicket = AppState.GetState()?.SelectedTicket;
            if (currentSelectedTicket?.Id == ticketId)
            {
                Logger.LogDebug("Ticket {TicketId} is already selected, skipping refresh", ticketId);
                return;
            }
            
            // Set loading state for ticket details
            AppState.DispatchLoadingStateAsync(true);
            
            // Fetch full ticket details including messages
            var fullTicket = await ApiService.GetTicketAsync(ticketId);
            if (fullTicket != null)
            {
                await AppState.DispatchSelectTicketAsync(fullTicket);
                Logger.LogDebug("Successfully selected and loaded ticket {TicketId}", ticketId);
            }
            else
            {
                Logger.LogWarning("Failed to load ticket details for ticket {TicketId}", ticketId);
                await AppState.DispatchErrorAsync("Failed to load ticket details. Please try again.");
            }
            
            AppState.DispatchLoadingStateAsync(false);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading ticket details for ticket {TicketId}", ticketId);
            await AppState.DispatchErrorAsync("Failed to load ticket details. Please try again.");
            AppState.DispatchLoadingStateAsync(false);
        }
    }

    private async Task RefreshSelectedTicket()
    {
        var currentSelectedTicket = AppState.GetState()?.SelectedTicket;
        if (currentSelectedTicket == null)
        {
            Logger.LogWarning("No ticket selected for refresh");
            return;
        }

        try
        {
            // Set loading state for ticket details
            AppState.DispatchLoadingStateAsync(true);
            
            // Fetch fresh ticket details including messages
            var fullTicket = await ApiService.GetTicketAsync(currentSelectedTicket.Id);
            if (fullTicket != null)
            {
                await AppState.DispatchSelectTicketAsync(fullTicket);
                Logger.LogDebug("Successfully refreshed ticket {TicketId}", currentSelectedTicket.Id);
            }
            else
            {
                Logger.LogWarning("Failed to refresh ticket details for ticket {TicketId}", currentSelectedTicket.Id);
                await AppState.DispatchErrorAsync("Failed to refresh ticket details. Please try again.");
            }
            
            AppState.DispatchLoadingStateAsync(false);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing ticket details for ticket {TicketId}", currentSelectedTicket.Id);
            await AppState.DispatchErrorAsync("Failed to refresh ticket details. Please try again.");
            AppState.DispatchLoadingStateAsync(false);
        }
    }

    /// <summary>
    /// Loads tickets from the API and updates the app state
    /// </summary>
    /// <param name="autoSelectFirst">Whether to automatically select the first unresolved ticket after loading</param>
    /// <returns>The loaded tickets, or null if loading failed</returns>
    private async Task<IReadOnlyList<TicketDto>?> LoadTicketsAsync(bool autoSelectFirst = false)
    {
        var currentUser = AppState.GetState()?.CurrentUser;
        if (currentUser == null)
        {
            Logger.LogWarning("No authenticated user found when loading tickets");
            return null;
        }

        try
        {
            // For agents, fetch unresolved tickets from all players
            var unresolvedTickets = await ApiService.GetUnresolvedTicketsAsync();
            
            // Store tickets in app state
            await AppState.DispatchTicketsLoadedAsync(unresolvedTickets);
            
            // Auto-select first unresolved ticket if requested and available
            if (autoSelectFirst)
            {
                var firstUnresolvedTicket = unresolvedTickets.FirstOrDefault();
                if (firstUnresolvedTicket != null)
                {
                    await SelectTicket(firstUnresolvedTicket.Id);
                }
            }
            
            Logger.LogDebug("Successfully loaded {Count} unresolved tickets for agent", unresolvedTickets.Count);
            return unresolvedTickets;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading tickets for agent {AgentId}", currentUser.Id);
            return null;
        }
    }

    private async Task RefreshTicketList()
    {
        await LoadTicketsAsync(autoSelectFirst: false);
    }

    private async Task ResolveTicket(Guid ticketId)
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            Logger.LogInformation("Resolving ticket {TicketId} by agent {AgentId}", ticketId, CurrentAgentId);
            
            var resolvedTicket = await ApiService.ResolveTicketAsync(ticketId);
            
            if (resolvedTicket != null)
            {
                // Refresh the selected ticket to get updated status
                await RefreshSelectedTicket();
                
                // Refresh the ticket list
                await RefreshTicketList();
                
                // Auto-select next unresolved ticket after resolving current one
                var unresolvedTickets = TicketList.ToList();
                if (unresolvedTickets.Any())
                {
                    await SelectTicket(unresolvedTickets.First().Id);
                }
                
                Logger.LogInformation("Ticket {TicketId} resolved successfully by agent {AgentId}", ticketId, CurrentAgentId);
            }
            else
            {
                Logger.LogWarning("Failed to resolve ticket {TicketId} for agent {AgentId}", ticketId, CurrentAgentId);
                errorMessage = "Failed to resolve ticket. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to resolve ticket {TicketId} for agent {AgentId}", ticketId, CurrentAgentId);
            errorMessage = "Failed to resolve ticket. Please try again.";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LogoutAgent()
    {
        await AppState.DispatchLogoutAsync();
        Navigation.NavigateTo("/agent/login", replace: true);
    }

    private async Task OnReplyResult(ReplyDto? newReply)
    {
        if (newReply != null)
        {
            // Refresh the currently selected ticket to get the updated ticket with the new reply
            await RefreshSelectedTicket();
            
            // Refresh the ticket list to ensure proper sorting by last update date
            await RefreshTicketList();
            
            Logger.LogInformation("Successfully handled reply result for ticket {TicketId}", selectedTicket?.Id);
        }
        else
        {
            Logger.LogWarning("Reply creation failed or returned null result");
        }
    }

    public void Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}
