@page "/agent/login"
@layout TicketLayout
@inject AppStateStore AppState
@inject ApiService ApiService
@inject NavigationManager Navigation
@implements IDisposable
@using CustomerServiceApp.Application.Authentication

<PageTitle>Agent Login</PageTitle>

<div class="d-flex align-items-center justify-content-center h-100">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="card shadow">
                    <div class="card-header bg-success text-white">
                        <h3 class="text-center mb-0">Agent Login</h3>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }
                        
                        <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" />
                            
                            <div class="mb-3">
                                <label for="agent-email" class="form-label">Email</label>
                                <InputText @bind-Value="email" class="form-control" id="agent-email" placeholder="Enter your email" disabled="@isLoading" />
                                <ValidationMessage For="@(() => loginRequest.Email)" class="text-danger" />
                            </div>
                            <div class="mb-3">
                                <label for="agent-password" class="form-label">Password</label>
                                <InputText type="password" @bind-Value="password" class="form-control" id="agent-password" placeholder="Enter your password" disabled="@isLoading" />
                                <ValidationMessage For="@(() => loginRequest.Password)" class="text-danger" />
                            </div>
                            <button type="submit" class="btn btn-success w-100" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <span>Signing In...</span>
                                }
                                else
                                {
                                    <span>Sign In</span>
                                }
                            </button>
                        </EditForm>
                        
                        <div class="text-center mt-3">
                            <small class="text-muted">
                                Demo users: agent@customerservice.com (password: password123)
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string email = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;
    private bool isLoading;

    // Create the DTO dynamically for validation
    private LoginRequestDto loginRequest => new(email, password);

    protected override void OnInitialized()
    {
        AppState.StateChanged += StateHasChanged;
        
        // Check if already authenticated and redirect
        var state = AppState.GetState();
        if (state.IsAuthenticated && state.IsAgent)
        {
            Navigation.NavigateTo("/agent/tickets", replace: true);
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            await AppState.DispatchLoadingStateAsync(true);
            
            var result = await ApiService.AgentLoginAsync(loginRequest);
            
            if (result != null)
            {
                // Verify the user is actually an agent
                if (result.User is not AgentDto)
                {
                    errorMessage = "Invalid credentials or account type. Please use the correct login page.";
                    await AppState.DispatchErrorAsync(errorMessage);
                    return;
                }

                await AppState.DispatchLoginAsync(result);
                ApiService.SetAuthorizationHeader(result.Token);
                
                // Navigate to agent tickets
                Navigation.NavigateTo("/agent/tickets", replace: true);
            }
            else
            {
                errorMessage = "Invalid email or password. Please try again.";
                await AppState.DispatchErrorAsync(errorMessage);
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred during login. Please try again.";
            await AppState.DispatchErrorAsync(errorMessage);
        }
        finally
        {
            isLoading = false;
            await AppState.DispatchLoadingStateAsync(false);
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        AppState.StateChanged -= StateHasChanged;
    }
}
