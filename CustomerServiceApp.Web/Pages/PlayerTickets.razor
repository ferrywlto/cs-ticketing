@page "/player/tickets"
@layout TicketLayout
@using CustomerServiceApp.Web.Services
@using CustomerServiceApp.Web
@using CustomerServiceApp.Application.Tickets
@using CustomerServiceApp.Application.Common.DTOs
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager Navigation
@inject AppStateStore AppState
@inject ApiService ApiService
@inject ILogger<PlayerTickets> Logger
@implements IDisposable



<div class="container-fluid h-100">
    <div class="row h-100">
        <!-- Left Panel: New Ticket Button + Ticket List -->
        <div class="col-md-4 border-end">
            <div class="d-flex flex-column h-100">
                <!-- Logout Button and New Ticket Button -->
                <div class="p-3 border-bottom">
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-secondary" @onclick="LogoutPlayer">
                            <i class="bi bi-box-arrow-left"></i> Logout
                        </button>
                        <button class="btn btn-primary flex-grow-1" @onclick="CreateNewTicket">
                            <i class="bi bi-plus-circle"></i> New ticket
                        </button>
                    </div>
                </div>
                
                <!-- Ticket List -->
                <div class="flex-grow-1 overflow-auto">
                    @if (isLoading)
                    {
                        <div class="p-3 text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div class="mt-2">Loading tickets...</div>
                        </div>
                    }
                    else if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="p-3">
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        </div>
                    }
                    else if (!TicketList.Any())
                    {
                        <div class="p-3 text-center text-muted">
                            <i class="bi bi-inbox fs-1"></i>
                            <div class="mt-2">No tickets found</div>
                            <div class="small">Create your first ticket to get started</div>
                        </div>
                    }
                    else
                    {
                        @foreach (var ticket in TicketList)
                        {
                            <div class="ticket-list-item p-3 border-bottom @(ticket.Id == selectedTicket?.Id ? "selected" : "")" 
                                 @onclick="() => SelectTicket(ticket.Id)">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1 me-3">
                                        <h6 class="mb-1 text-truncate">@ticket.Title</h6>
                                        <div class="small text-muted">
                                            <div>@(ticket.Creator?.Name ?? "Unknown")</div>
                                            <div>@(ticket.Creator?.PlayerNumber ?? "N/A") • @ticket.CreatedDate.ToString("MMM dd, yyyy")</div>
                                        </div>
                                    </div>
                                    <div class="avatar-placeholder">
                                        @if (!string.IsNullOrEmpty(ticket.Creator?.Avatar))
                                        {
                                            <img src="@ticket.Creator.Avatar" alt="@(ticket.Creator?.Name ?? "User")" class="rounded-circle" style="width: 32px; height: 32px; object-fit: cover;" />
                                        }
                                        else
                                        {
                                            <i class="bi bi-person-circle fs-4 text-primary"></i>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        
        <!-- Right Panel: Ticket Details -->
        <div class="col-md-8">
            @if (selectedTicket != null)
            {
                <div class="d-flex flex-column h-100">
                    <!-- Ticket Header -->
                    <div class="p-3 border-bottom">
                        <div class="mb-3">
                            <h4 class="mb-0">@selectedTicket.Title</h4>
                        </div>
                        
                        <!-- Ticket Description Card -->
                        <div class="card mb-3">
                            <div class="card-body">
                                <p class="card-text">@selectedTicket.Description</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <div class="small text-muted">
                                        <div>@(selectedTicket.Creator?.Name ?? "Unknown")</div>
                                        <div>@(selectedTicket.Creator?.PlayerNumber ?? "N/A") • @selectedTicket.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                                    </div>
                                    <div class="avatar-placeholder">
                                        @if (!string.IsNullOrEmpty(selectedTicket.Creator?.Avatar))
                                        {
                                            <img src="@selectedTicket.Creator.Avatar" alt="@(selectedTicket.Creator?.Name ?? "User")" class="rounded-circle" style="width: 32px; height: 32px; object-fit: cover;" />
                                        }
                                        else
                                        {
                                            <i class="bi bi-person-circle fs-4 text-primary"></i>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Messages Area -->
                    <div class="flex-grow-1 overflow-auto p-3">
                        @if (selectedTicket.Messages?.Any() == true)
                        {
                            @foreach (var message in selectedTicket.Messages)
                            {
                                var isFromAgent = message.Author?.UserType == "Agent";
                                <div class="message-item mb-3">
                                    <div class="card @(isFromAgent ? "border-success" : "border-primary")">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <div class="flex-grow-1">
                                                    <p class="card-text">@message.Content</p>
                                                    <div class="small text-muted">
                                                        <div>@(isFromAgent ? "CS Agent" : message.Author?.Name ?? "Unknown")</div>
                                                        <div>@message.CreatedDate.ToString("MMM dd, yyyy HH:mm")</div>
                                                    </div>
                                                </div>
                                                <div class="avatar-placeholder ms-3">
                                                    @if (isFromAgent)
                                                    {
                                                        <i class="bi bi-shield-fill fs-4 text-success"></i>
                                                    }
                                                    else if (!string.IsNullOrEmpty(message.Author?.Avatar))
                                                    {
                                                        <img src="@message.Author.Avatar" alt="@(message.Author?.Name ?? "User")" class="rounded-circle" style="width: 32px; height: 32px; object-fit: cover;" />
                                                    }
                                                    else
                                                    {
                                                        <i class="bi bi-person-circle fs-4 text-primary"></i>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted">
                                <i class="bi bi-chat-text fs-1"></i>
                                <p>No messages yet. Start the conversation!</p>
                            </div>
                        }
                    </div>
                    
                    <!-- Reply Section -->
                    <div class="p-3 border-top">
                        <div class="d-flex align-items-start">
                            <div class="avatar-placeholder me-3">
                                @{
                                    var currentUser = AppState.GetState()?.CurrentUser;
                                }
                                @if (!string.IsNullOrEmpty(currentUser?.Avatar))
                                {
                                    <img src="@currentUser.Avatar" alt="@(currentUser?.Name ?? "User")" class="rounded-circle" style="width: 32px; height: 32px; object-fit: cover;" />
                                }
                                else
                                {
                                    <i class="bi bi-person-circle fs-4 text-primary"></i>
                                }
                            </div>
                            <div class="flex-grow-1">
                                <textarea class="form-control mb-2" rows="3" placeholder="Type your message..." @bind="replyText" disabled="@(AppState.GetState()?.IsLoading ?? false)"></textarea>
                                <button class="btn btn-primary" @onclick="SendReply" disabled="@(string.IsNullOrWhiteSpace(replyText) || AppState.GetState()?.IsLoading == true)">
                                    @if (AppState.GetState()?.IsLoading == true)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Sending...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-send"></i>
                                        <span>Send</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="d-flex align-items-center justify-content-center h-100">
                    <div class="text-center text-muted">
                        <i class="bi bi-ticket-detailed fs-1 mb-3"></i>
                        <h5>Select a ticket to view details</h5>
                        <p>Choose a ticket from the list to see the conversation</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- New Ticket Modal -->
<NewTicketModal IsVisible="showNewTicketModal" 
                OnClose="CloseNewTicketModal" 
                OnTicketCreated="OnTicketCreated" />

@code {
    private string replyText = "";
    private bool isLoading = true;
    private string? errorMessage;
    private bool showNewTicketModal = false;

    // Get current player ID from app state
    private string CurrentPlayerId => AppState.GetState()?.CurrentUser?.Id.ToString() ?? "";

    // Get tickets from app state instead of mock data
    private IReadOnlyList<TicketDto> TicketList => AppState.GetState()?.Tickets ?? new List<TicketDto>().AsReadOnly();

    // Get selected ticket from app state
    private TicketDto? selectedTicket => AppState.GetState()?.SelectedTicket;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to state changes
        AppState.StateChanged += OnStateChanged;
        
        try
        {
            // Set loading state
            AppState.DispatchLoadingStateAsync(true);
            
            // Get current player ID
            var currentUser = AppState.GetState()?.CurrentUser;
            if (currentUser == null)
            {
                Logger.LogWarning("No authenticated user found when loading player tickets");
                Navigation.NavigateTo("/player/login", replace: true);
                return;
            }

            // Fetch player-specific tickets from server
            var ticketSummaries = await ApiService.GetPlayerTicketsAsync(currentUser.Id);
            
            // Convert TicketSummaryDto to TicketDto for app state compatibility
            var tickets = ticketSummaries.Select(summary => new TicketDto(
                summary.Id,
                summary.Title,
                summary.Description,
                summary.Creator,
                summary.Status,
                summary.CreatedDate,
                summary.LastUpdateDate,
                null, // ResolvedDate
                null, // ResolvedBy
                new List<ReplyDto>() // Empty messages - will be loaded when ticket is selected
            )).ToList().AsReadOnly();
            
            // Store tickets in app state
            await AppState.DispatchTicketsLoadedAsync(tickets);
            
            // Auto-select first ticket if available (this will trigger loading of full details)
            var firstTicket = tickets.FirstOrDefault();
            if (firstTicket != null)
            {
                await SelectTicket(firstTicket.Id);
            }
            
            isLoading = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load tickets for player {PlayerId}", CurrentPlayerId);
            errorMessage = "Failed to load tickets. Please try again.";
            isLoading = false;
            AppState.DispatchLoadingStateAsync(false);
        }
    }

    private async void OnStateChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task SelectTicket(Guid ticketId)
    {
        try
        {
            // Check if the clicked ticket is already selected - if so, do nothing
            var currentSelectedTicket = AppState.GetState()?.SelectedTicket;
            if (currentSelectedTicket?.Id == ticketId)
            {
                Logger.LogDebug("Ticket {TicketId} is already selected, skipping refresh", ticketId);
                return;
            }
            
            // Set loading state for ticket details
            AppState.DispatchLoadingStateAsync(true);
            
            // Fetch full ticket details including messages
            var fullTicket = await ApiService.GetTicketAsync(ticketId);
            if (fullTicket != null)
            {
                await AppState.DispatchSelectTicketAsync(fullTicket);
                Logger.LogDebug("Successfully selected and loaded ticket {TicketId}", ticketId);
            }
            else
            {
                Logger.LogWarning("Failed to load ticket details for ticket {TicketId}", ticketId);
                await AppState.DispatchErrorAsync("Failed to load ticket details. Please try again.");
            }
            
            AppState.DispatchLoadingStateAsync(false);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading ticket details for ticket {TicketId}", ticketId);
            await AppState.DispatchErrorAsync("Failed to load ticket details. Please try again.");
            AppState.DispatchLoadingStateAsync(false);
        }
    }

    private async Task RefreshSelectedTicket()
    {
        var currentSelectedTicket = AppState.GetState()?.SelectedTicket;
        if (currentSelectedTicket == null)
        {
            Logger.LogWarning("No ticket selected for refresh");
            return;
        }

        try
        {
            // Set loading state for ticket details
            AppState.DispatchLoadingStateAsync(true);
            
            // Fetch fresh ticket details including messages
            var fullTicket = await ApiService.GetTicketAsync(currentSelectedTicket.Id);
            if (fullTicket != null)
            {
                await AppState.DispatchSelectTicketAsync(fullTicket);
                Logger.LogDebug("Successfully refreshed ticket {TicketId}", currentSelectedTicket.Id);
            }
            else
            {
                Logger.LogWarning("Failed to refresh ticket details for ticket {TicketId}", currentSelectedTicket.Id);
                await AppState.DispatchErrorAsync("Failed to refresh ticket details. Please try again.");
            }
            
            AppState.DispatchLoadingStateAsync(false);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error refreshing ticket details for ticket {TicketId}", currentSelectedTicket.Id);
            await AppState.DispatchErrorAsync("Failed to refresh ticket details. Please try again.");
            AppState.DispatchLoadingStateAsync(false);
        }
    }

    private async Task CreateNewTicket()
    {
        try
        {
            // Show the new ticket modal
            showNewTicketModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to show new ticket modal");
            await AppState.DispatchErrorAsync("Failed to open new ticket form. Please try again.");
        }
    }

    private void CloseNewTicketModal()
    {
        showNewTicketModal = false;
        StateHasChanged();
    }

    private async Task OnTicketCreated(TicketDto newTicket)
    {
        try
        {
            // Close the modal
            showNewTicketModal = false;
            
            // Refresh the entire ticket list to ensure consistency
            var currentUser = AppState.GetState()?.CurrentUser;
            if (currentUser != null)
            {
                // Fetch fresh tickets from server
                var ticketSummaries = await ApiService.GetPlayerTicketsAsync(currentUser.Id);
                
                // Convert TicketSummaryDto to TicketDto for app state compatibility
                var tickets = ticketSummaries.Select(summary => new TicketDto(
                    summary.Id,
                    summary.Title,
                    summary.Description,
                    summary.Creator,
                    summary.Status,
                    summary.CreatedDate,
                    summary.LastUpdateDate,
                    null, // ResolvedDate
                    null, // ResolvedBy
                    new List<ReplyDto>() // Empty messages - will be loaded when ticket is selected
                )).ToList().AsReadOnly();
                
                // Store refreshed tickets in app state
                await AppState.DispatchTicketsLoadedAsync(tickets);
                
                // Select the newly created ticket
                await SelectTicket(newTicket.Id);
            }
            
            Logger.LogInformation("Successfully created and selected new ticket {TicketId}", newTicket.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling newly created ticket {TicketId}", newTicket.Id);
        }
    }

    private async Task LogoutPlayer()
    {
        await AppState.DispatchLogoutAsync();
        Navigation.NavigateTo("/player/login", replace: true);
    }

    private async Task SendReply()
    {
        var currentUser = AppState.GetState()?.CurrentUser;
        if (!string.IsNullOrWhiteSpace(replyText) && selectedTicket != null && currentUser != null)
        {
            try
            {
                AppState.DispatchLoadingStateAsync(true);
                
                // Create reply DTO
                var createReplyDto = new CreateReplyDto(
                    replyText,
                    currentUser.Id,
                    selectedTicket.Id);
                
                // Call API to add reply
                var newReply = await ApiService.AddReplyAsync(selectedTicket.Id, createReplyDto);
                
                // If API returned the new reply, refresh the selected ticket to get the latest data
                if (newReply != null)
                {
                    // Clear reply text after successful creation
                    replyText = "";
                    
                    // Refresh the currently selected ticket to get the updated ticket with the new reply
                    await RefreshSelectedTicket();
                    
                    Logger.LogInformation("Reply added to ticket {TicketId}", selectedTicket.Id);
                }
                
                AppState.DispatchLoadingStateAsync(false);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to send reply for ticket {TicketId}", selectedTicket.Id);
                await AppState.DispatchErrorAsync("Failed to send reply. Please try again.");
                AppState.DispatchLoadingStateAsync(false);
            }
        }
    }

    public void Dispose()
    {
        AppState.StateChanged -= OnStateChanged;
    }
}
